import os
import subprocess
import pandas as pd
import matplotlib.pyplot as plt
from helper.config import PARAMETERS, TRIO_DATA, PATHS

# ==== C·∫•u h√¨nh ====
vcf_dir = PATHS["vcf_directory"]
output_dir = os.path.join(vcf_dir, "stats")
os.makedirs(output_dir, exist_ok=True)

chromosomes = [str(i) for i in range(1, 22)] + ["X"]
summary_data = []

print("üìä B·∫Øt ƒë·∫ßu th·ªëng k√™ to√†n b·ªô th√¥ng s·ªë bi·∫øn th·ªÉ...")

for chrom in chromosomes:
    vcf_file = os.path.join(vcf_dir, f"chr{chrom}_variants.vcf.gz")

    # === 1. T·ªïng s·ªë bi·∫øn th·ªÉ (SNPs + InDels) ===
    stats_file = os.path.join(output_dir, f"chr{chrom}.stats.txt")
    subprocess.run(f"bcftools stats {vcf_file} > {stats_file}", shell=True, check=True)

    total_variants = 0
    with open(stats_file) as f:
        for line in f:
            if line.startswith("SN") and "number of records:" in line:
                total_variants = int(line.strip().split()[-1])
                break

    # === 2. S·ªë SNPs ===
    snps_file = os.path.join(output_dir, f"chr{chrom}.snps.vcf.gz")
    subprocess.run(f"bcftools view -v snps {vcf_file} -Oz -o {snps_file}", shell=True)
    subprocess.run(f"bcftools index {snps_file}", shell=True)
    snps_stats = subprocess.check_output(f"bcftools index -n {snps_file}", shell=True)
    num_snps = int(snps_stats.decode().strip())

    # === 3. S·ªë InDels ===
    indels_file = os.path.join(output_dir, f"chr{chrom}.indels.vcf.gz")
    subprocess.run(f"bcftools view -v indels {vcf_file} -Oz -o {indels_file}", shell=True)
    subprocess.run(f"bcftools index {indels_file}", shell=True)
    indels_stats = subprocess.check_output(f"bcftools index -n {indels_file}", shell=True)
    num_indels = int(indels_stats.decode().strip())

    summary_data.append({
        "Chromosome": chrom,
        "TotalVariants": total_variants,
        "SNPs": num_snps,
        "InDels": num_indels
    })

# === L∆∞u b·∫£ng th·ªëng k√™ bi·∫øn th·ªÉ ===
df = pd.DataFrame(summary_data)
df["Chromosome"] = pd.Categorical(df["Chromosome"], categories=chromosomes, ordered=True)
df.sort_values("Chromosome", inplace=True)
df.to_csv(os.path.join(output_dir, "variant_summary.csv"), index=False)

# === V·∫Ω bi·ªÉu ƒë·ªì s·ªë bi·∫øn th·ªÉ ===
plt.figure(figsize=(12, 6))
plt.bar(df["Chromosome"], df["SNPs"], label="SNPs", alpha=0.7)
plt.bar(df["Chromosome"], df["InDels"], bottom=df["SNPs"], label="InDels", alpha=0.7)
plt.xlabel("Nhi·ªÖm s·∫Øc th·ªÉ")
plt.ylabel("S·ªë bi·∫øn th·ªÉ")
plt.title("Ph√¢n b·ªë SNPs v√† InDels theo nhi·ªÖm s·∫Øc th·ªÉ")
plt.legend()
plt.tight_layout()
plt.savefig(os.path.join(output_dir, "variant_distribution.png"))
plt.show()

print("‚úÖ ƒê√£ ho√†n t·∫•t ph·∫ßn 2 - Th·ªëng k√™ bi·∫øn th·ªÉ!")

# === PH·∫¶N 3: T√≠nh ƒëa d·∫°ng ki·ªÉu gen (to√†n b·ªô d·ªØ li·ªáu) ===
print("üìä B·∫Øt ƒë·∫ßu ph√¢n t√≠ch ƒëa d·∫°ng ki·ªÉu gen (Heterozygosity, MAF)...")

# T√≠nh heterozygosity cho to√†n b·ªô d·ªØ li·ªáu (kh√¥ng c·∫ßn m·∫´u ri√™ng bi·ªát)
het_results = []
for chrom in chromosomes:
    vcf_file = os.path.join(vcf_dir, f"chr{chrom}_variants.vcf.gz")
    out_prefix = os.path.join(output_dir, f"chr{chrom}")
    het_file = out_prefix + ".het"

    subprocess.run(f"vcftools --gzvcf {vcf_file} --het --out {out_prefix}", shell=True)
    if os.path.exists(het_file):
        het_df = pd.read_csv(het_file, delim_whitespace=True)
        het_df["CHROM"] = chrom
        het_results.append(het_df)

# G·ªôp d·ªØ li·ªáu heterozygosity
if het_results:
    het_df_all = pd.concat(het_results, ignore_index=True)
    het_df_all.to_csv(os.path.join(output_dir, "heterozygosity_all_chromosomes.csv"), index=False)

# T√≠nh t·∫ßn su·∫•t alen (MAF) cho to√†n b·ªô d·ªØ li·ªáu
maf_all = []
for chrom in chromosomes:
    vcf_file = os.path.join(vcf_dir, f"chr{chrom}_variants.vcf.gz")
    out_prefix = os.path.join(output_dir, f"chr{chrom}_maf")
    subprocess.run(f"vcftools --gzvcf {vcf_file} --freq2 --out {out_prefix}", shell=True)
    maf_file = out_prefix + ".frq"
    if os.path.exists(maf_file):
        maf_df = pd.read_csv(maf_file, delim_whitespace=True, comment="#")
        maf_df["CHROM"] = chrom
        maf_all.append(maf_df)

if maf_all:
    maf_df_all = pd.concat(maf_all, ignore_index=True)
    maf_df_all.to_csv(os.path.join(output_dir, "maf_all_chromosomes.csv"), index=False)

print("‚úÖ ƒê√£ ho√†n t·∫•t ph·∫ßn 3 - ƒêa d·∫°ng ki·ªÉu gen!")

# === G·ª£i √Ω b∆∞·ªõc ti·∫øp theo ===
print("üéâ T·∫•t c·∫£ th·ªëng k√™ ƒë√£ ƒë∆∞·ª£c l∆∞u trong th∆∞ m·ª•c:", output_dir)
print("üìÅ Bao g·ªìm: T·ªïng bi·∫øn th·ªÉ, SNP/InDel, d·ªã h·ª£p t·ª≠, MAF v√† bi·ªÉu ƒë·ªì.")
